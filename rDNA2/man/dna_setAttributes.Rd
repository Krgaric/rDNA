% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rDNA.R
\name{dna_setAttributes}
\alias{dna_setAttributes}
\title{Recode attributes in the DNA database}
\usage{
dna_setAttributes(
  connection,
  attributes,
  statementType = 1,
  variable = "organization",
  removeStatements = FALSE,
  simulate = TRUE,
  verbose = TRUE
)
}
\arguments{
\item{connection}{A \code{dna_connection} object created by the
\code{dna_connection} function.}

\item{attributes}{A dataframe with at least six columns: id (integer), value
(character), color (character; must be in hexadecimal RGB format),
type (character), alias (character), and notes (character), in no
particular order. \code{NA} values or \code{-1} values are permitted in the
id column. If these are encountered, a new ID is automatically generated,
and the attribute is added.}

\item{statementType}{The ID of the statement type (as an integer) or the name
of the statement type (as a character object) in which the variable is
defined.}

\item{variable}{The name of the variable for which attribute data should be
retrieved, for example \code{"organization"} or \code{"concept"}.}

\item{removeStatements}{If an attribute is present in the DNA database but
not in the \code{attributes} dataframe, the respective attribute is removed
from the database. However, the attribute may have been used in statements.
If \code{removeStatements = TRUE} is set, these statements are removed
along with the respective attribute. If \code{removeStatements = FALSE} is
set, the statements are not deleted, the attribute is kept as well, and a
message is printed.}

\item{simulate}{Should the changes only be simulated instead of actually
applied to the DNA connection and the SQL database? This can help to
plan more complex recode operations.}

\item{verbose}{Print details about the recode operations?}
}
\description{
Add, remove, and edit values and attributes for a variable in a DNA database.
}
\details{
This function takes a dataframe with columns "id", "value", "color", "type",
"alias", and "notes" (in no particular order and ignoring any additional
columns) and hands it over to a DNA connection in order to update the
attributes in the database for a specific statement type and variable, based
on the contents of the dataframe. The typical workflow is to retrieve the
attributes for some statement type and variable using
\link{dna_getAttributes}, manipulating the attributes, and then applying the
changes with \link{dna_setAttributes}. Attributes that are no longer in the
dataframe are removed from the database; attributes in the dataframe that
are not in the database are added to the database; and contents of existing
attributes are updated. By default, the changes are only simulated and not
actually written into the database. The user can inspect the reported
changes and then apply the actual changes by setting \code{simulate = FALSE}.
}
\examples{
\dontrun{
dna_init()
conn <- dna_connection(dna_sample())
at <- dna_getAttributes(conn)

at$value[2] <- "new organization name"   # recode a value
at$color[5] <- "#0000FF"                 # recode a color
at$notes[3] <- "Added a note via rDNA."  # recode a note
at <- at[-6, ]                           # remove an attribute
at <- rbind(at,
            data.frame(id = NA,
                       value = "new actor",
                       color = "#00FFCC",
                       type = "NGO",
                       alias = "",
                       notes = ""))
dna_setAttributes(conn,
                  statementType = "DNA Statement",
                  variable = "organization",
                  at,
                  removeStatements = TRUE,
                  simulate = TRUE)
}

}
\author{
Philip Leifeld
}
