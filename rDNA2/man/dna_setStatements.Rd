% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rDNA.R
\name{dna_setStatements}
\alias{dna_setStatements}
\title{Recode statements in the DNA database}
\usage{
dna_setStatements(connection, statements, simulate = TRUE, verbose = TRUE)
}
\arguments{
\item{connection}{A \code{dna_connection} object created by the
\code{dna_connection} function.}

\item{statements}{A data frame with the following columns:
\enumerate{
  \item id (integer - can be \code{NA} if a new statement is added),
  \item documentId (integer - needs to refer to an existing document ID),
  \item startCaret (integer - the start position of the statement in the
  text as a character count, starting at 0 for the first character in the
  document),
  \item endCaret (integer - the end position of the statement in the text
  as a character count, where for example a value of 1 would indicate that
  the statement ends after the first character in the document),
  \item statementTypeId (integer - ID of the corresponding statement type),
  \item coder (integer - ID of the coder),
  \item additional columns for the respective variable, such as
  organization, concept, agreement, etc.
}
\code{NA} values or \code{-1} values are permitted in the id column. If
these are encountered, a new ID is automatically generated, and the
statement is added.}

\item{simulate}{Should the changes only be simulated instead of actually
applied to the DNA connection and the SQL database? This can help to
plan more complex recode operations.}

\item{verbose}{Print details about the recode operations?}
}
\description{
Recode statements in a DNA database.
}
\details{
This function takes a dataframe with columns "id", "documentId",
"startCaret", "endCaret", "statementTypeId", "coder", and addition columns
for the variables of the respective statement type, as returned by the
\link{dna_getStatements} function, and hands it over to a DNA connection in
order to update the statements in the database based on the contents of the
dataframe. The typical workflow is to retrieve the statements using
\link{dna_getStatements}, manipulate the statements in the data frame, and
then apply the changes with \link{dna_setStatements}. Statements that are no
longer in the data frame are removed from the database; statements in the
data frame that are not in the database are added to the database; and
contents of existing statements are updated. By default, the changes are only
simulated and not actually written into the database. The user can inspect
the reported changes and then apply the actual changes by setting
\code{simulate = FALSE}. If attributes for any of the variables are affected,
they are renamed or added if there is no other instance in the database. Note
that the removal or update of statements does not automatically remove any
attributes. See \link{dna_removeAttribute} and \link{dna_setAttributes} for
this purpose.
}
\examples{
\dontrun{
dna_init()
conn <- dna_connection(dna_sample())
statements <- dna_getStatements(conn)
statements$organization[1] <- "New actor for first statement"
statements$concept[3] <- "New concept for the third statement"
statements <- statements[, -5] # removing the fifth statement
dna_setStatements(conn, statements, simulate = TRUE) # apply changes
}

}
\author{
Philip Leifeld
}
